/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./client/base64.ts":
/*!**************************!*\
  !*** ./client/base64.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.encodeBase64 = encodeBase64;\nexports.decodeBase64 = decodeBase64;\nfunction encodeBase64(input) {\n    return btoa(input);\n}\nfunction decodeBase64(encoded) {\n    return atob(encoded);\n}\n\n\n//# sourceURL=webpack://project-bored/./client/base64.ts?");

/***/ }),

/***/ "./client/data-attr.ts":
/*!*****************************!*\
  !*** ./client/data-attr.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DATA = void 0;\nexports.DATA = {\n    CHANGED: \"data-changed\",\n    DEFAULT_LABEL: \"data-default-label\",\n    ID: \"data-id\",\n    SELECTED: \"data-selected\",\n    POPUP_FOR: \"data-popup-for\",\n    TRIGGER_FOR: \"data-trigger-for\",\n    STATE: \"data-state\",\n    ACTIVE: \"data-active\",\n    INDEX: \"data-index\",\n    HIDDEN: \"data-hidden\",\n    LOADING: \"data-loading\",\n};\n\n\n//# sourceURL=webpack://project-bored/./client/data-attr.ts?");

/***/ }),

/***/ "./client/debounce.ts":
/*!****************************!*\
  !*** ./client/debounce.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.debounce = debounce;\nfunction debounce(callback, ms) {\n    let timeout;\n    return () => {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => {\n            callback();\n        }, ms);\n    };\n}\n\n\n//# sourceURL=webpack://project-bored/./client/debounce.ts?");

/***/ }),

/***/ "./client/global-data.ts":
/*!*******************************!*\
  !*** ./client/global-data.ts ***!
  \*******************************/
/***/ (() => {

eval("\nfunction setupGlobalData() {\n    // Step 1: Select the <script> element\n    const scriptElement = document.querySelector(\"script#__DATA__\");\n    if (!scriptElement) {\n        throw new Error(\"ids script not found\");\n    }\n    // Step 2: Get the JSON string from the script content\n    const jsonString = scriptElement.textContent;\n    if (!jsonString) {\n        throw new Error(\"ids script has no content\");\n    }\n    window.home = JSON.parse(jsonString);\n    window.search = JSON.parse(jsonString);\n}\nsetupGlobalData();\n\n\n//# sourceURL=webpack://project-bored/./client/global-data.ts?");

/***/ }),

/***/ "./client/link.ts":
/*!************************!*\
  !*** ./client/link.ts ***!
  \************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst data_attr_1 = __webpack_require__(/*! ./data-attr */ \"./client/data-attr.ts\");\n/** Navigation controller to avoid race conditions */\nlet currentNavigationController = null;\n/** Elements */\nlet pageLoader;\n/** Is page changing */\nlet isLoading = new Proxy({ value: false }, {\n    set(obj, _, newValue) {\n        obj.value = newValue;\n        if (newValue) {\n            pageLoader.removeAttribute(data_attr_1.DATA.HIDDEN);\n        }\n        else {\n            pageLoader.setAttribute(data_attr_1.DATA.HIDDEN, \"true\");\n        }\n        return true;\n    },\n});\n// Function to handle the custom logic before navigation\nasync function handleCustomLogicAndNavigate(href) {\n    console.log(\"Executing custom logic before navigation...\", href);\n    // Cancel the previous request if it exists\n    if (currentNavigationController) {\n        currentNavigationController.abort();\n    }\n    // Create a new AbortController for the current navigation\n    currentNavigationController = new AbortController();\n    const { signal } = currentNavigationController;\n    try {\n        isLoading.value = true;\n        const response = await fetch(href, { signal });\n        if (response.status !== 200) {\n            return;\n        }\n        const html = await response.text();\n        // Replace the entire document with the fetched HTML\n        document.open();\n        document.write(html);\n        document.close();\n        // Optionally, update the browser's history\n        history.pushState(null, \"\", href);\n        isLoading.value = false;\n    }\n    catch (error) {\n        if (error instanceof Error && error.name === \"AbortError\") {\n            return;\n        }\n        isLoading.value = false;\n    }\n}\n// Function to handle navigation events\nfunction handleNavigation(event) {\n    let target = null;\n    if (event instanceof MouseEvent) {\n        target = event.target.closest(\"a\"); // Use closest to handle nested elements\n    }\n    else if (event instanceof KeyboardEvent && event.key === \"Enter\") {\n        target = event.target;\n    }\n    if (target && target.tagName === \"A\") {\n        const anchor = target;\n        if (anchor.href.startsWith(window.location.origin)) {\n            event.preventDefault(); // Prevent the default navigation\n            console.log(\"User triggered navigation to another page.\");\n            // Call the custom logic function before navigating\n            handleCustomLogicAndNavigate(anchor.href);\n        }\n    }\n}\n// Function to handle popstate events (back/forward navigation)\nfunction handlePopState() {\n    handleCustomLogicAndNavigate(window.location.href); // Call the function with popstate flag\n}\nwindow.addEventListener(\"load\", () => {\n    pageLoader = document.getElementById(window.search.Ids.PageLoader);\n    // Event listener for link clicks\n    document.addEventListener(\"click\", handleNavigation);\n    // Event listener for keyboard navigation (Enter key)\n    document.addEventListener(\"keydown\", handleNavigation);\n    window.addEventListener(\"popstate\", handlePopState);\n});\n\n\n//# sourceURL=webpack://project-bored/./client/link.ts?");

/***/ }),

/***/ "./client/pages/search.ts":
/*!********************************!*\
  !*** ./client/pages/search.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__webpack_require__(/*! ../search-filters */ \"./client/search-filters.ts\");\n__webpack_require__(/*! ../searcher */ \"./client/searcher.ts\");\n__webpack_require__(/*! ../global-data */ \"./client/global-data.ts\");\n__webpack_require__(/*! ../link */ \"./client/link.ts\");\n\n\n//# sourceURL=webpack://project-bored/./client/pages/search.ts?");

/***/ }),

/***/ "./client/query-selector.ts":
/*!**********************************!*\
  !*** ./client/query-selector.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.queryByAttr = queryByAttr;\nexports.queryAllByAttr = queryAllByAttr;\nfunction queryByAttr(root, name, value) {\n    let selector = `[${name}`;\n    if (typeof value !== \"undefined\") {\n        selector += `=\"${value}\"`;\n    }\n    selector += \"]\";\n    const element = root?.querySelector(selector);\n    if (!element) {\n        return;\n    }\n    return element;\n}\nfunction queryAllByAttr(root = document, name, value) {\n    let selector = `[${name}`;\n    if (typeof value !== \"undefined\") {\n        selector += `=\"${value}\"`;\n    }\n    selector += \"]\";\n    const element = root.querySelectorAll(selector);\n    if (!element) {\n        return;\n    }\n    return [...element];\n}\n\n\n//# sourceURL=webpack://project-bored/./client/query-selector.ts?");

/***/ }),

/***/ "./client/search-filters.ts":
/*!**********************************!*\
  !*** ./client/search-filters.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst base64_1 = __webpack_require__(/*! ./base64 */ \"./client/base64.ts\");\nconst data_attr_1 = __webpack_require__(/*! ./data-attr */ \"./client/data-attr.ts\");\nconst query_selector_1 = __webpack_require__(/*! ./query-selector */ \"./client/query-selector.ts\");\nconst DEFAULT_FILTER_POPUP_OPEN = null;\nconst CHECKBOX_FILTERS_QUERY_PARAM = \"checkbox-filter\";\nconst DEFAULT_SEARCH_VALUE = \"\";\nconst DEFAULT_ACTIVE_INDEX = 0;\nconst DEFAULT_SELECTED_CHECKBOXES = {};\nlet filteredCheckboxesData;\nlet canUseMouseEvents = false;\n// Elements\nlet manufactersSearchInput;\nlet titlesSearchInput;\nlet filterTriggerElements;\nlet popupElements;\nlet filtersElement;\nlet searchResultContainerElement;\nlet clearAllButton;\n/** Input value state */\nlet popupOpen = new Proxy({ value: DEFAULT_FILTER_POPUP_OPEN }, {\n    set(obj, _, targetPopupIdentifier) {\n        document\n            .querySelectorAll(`[${data_attr_1.DATA.POPUP_FOR}]`)\n            .forEach((targetPopup) => targetPopup.setAttribute(data_attr_1.DATA.HIDDEN, \"true\"));\n        // Popup that will be opened\n        const targetPopup = (0, query_selector_1.queryByAttr)(document, data_attr_1.DATA.POPUP_FOR, targetPopupIdentifier);\n        targetPopup?.removeAttribute(data_attr_1.DATA.HIDDEN);\n        obj.value = targetPopupIdentifier;\n        return true;\n    },\n});\n/** Active index state */\nlet activeIndex = new Proxy({ value: DEFAULT_ACTIVE_INDEX }, {\n    set(obj, _, targetIndex) {\n        obj.value = targetIndex;\n        // Popup that will be opened\n        const targetPopup = (0, query_selector_1.queryByAttr)(document, data_attr_1.DATA.POPUP_FOR, popupOpen.value);\n        const currentPopupData = getOpenPopupData();\n        if (currentPopupData) {\n            const allCheckboxes = (0, query_selector_1.queryByAttr)(targetPopup, data_attr_1.DATA.ACTIVE);\n            const targetCheckboxId = currentPopupData[targetIndex].Id;\n            const targetCheckbox = (0, query_selector_1.queryByAttr)(targetPopup, data_attr_1.DATA.ID, targetCheckboxId);\n            allCheckboxes?.removeAttribute(data_attr_1.DATA.ACTIVE);\n            targetCheckbox?.setAttribute(data_attr_1.DATA.ACTIVE, \"true\");\n        }\n        return true;\n    },\n});\nlet titleSearchValue = new Proxy({ value: DEFAULT_SEARCH_VALUE }, {\n    set(obj, _, targetValue) {\n        obj.value = targetValue;\n        const filteredTitleChecboxes = rerenderPopupSearchList(targetValue);\n        if (filteredTitleChecboxes) {\n            filteredCheckboxesData.title = filteredTitleChecboxes;\n        }\n        return true;\n    },\n});\nlet manufactersSearchValue = new Proxy({ value: DEFAULT_SEARCH_VALUE }, {\n    set(obj, _, targetValue) {\n        obj.value = targetValue;\n        const filteredManufacterChecboxes = rerenderPopupSearchList(targetValue);\n        if (filteredManufacterChecboxes) {\n            filteredCheckboxesData.manufacters = filteredManufacterChecboxes;\n        }\n        return true;\n    },\n});\n/** Active index state */\nlet selectedTitles = new Proxy({ value: DEFAULT_SELECTED_CHECKBOXES }, {\n    set(obj, _, targetSelectedCheckboxes) {\n        obj.value = targetSelectedCheckboxes;\n        setCheckoboxListQueryParams(targetSelectedCheckboxes);\n        rerenderCheckboxList(targetSelectedCheckboxes);\n        return true;\n    },\n});\n/** Serch results is loading */\nlet isLoading = new Proxy({ value: false }, {\n    set(obj, _, targetLoading) {\n        obj.value = targetLoading;\n        if (targetLoading) {\n            searchResultContainerElement.setAttribute(data_attr_1.DATA.LOADING, \"true\");\n        }\n        else {\n            searchResultContainerElement.removeAttribute(data_attr_1.DATA.LOADING);\n        }\n        return true;\n    },\n});\nfunction rerenderCheckboxList(targetSelectedCheckboxes) {\n    const targetPopup = getOpenPopupElement();\n    const allSelectedCheckboxes = (0, query_selector_1.queryAllByAttr)(targetPopup, data_attr_1.DATA.SELECTED);\n    allSelectedCheckboxes?.forEach((option) => option.removeAttribute(data_attr_1.DATA.SELECTED));\n    Object.entries(targetSelectedCheckboxes).forEach(([type, checkboxes]) => {\n        const popupElement = (0, query_selector_1.queryByAttr)(document, data_attr_1.DATA.POPUP_FOR, type);\n        // CHECKBOX LIST\n        checkboxes.forEach((option) => {\n            const optionElement = (0, query_selector_1.queryByAttr)(popupElement, data_attr_1.DATA.ID, option.Id);\n            console.log(\"optionElement\", optionElement);\n            optionElement?.setAttribute(data_attr_1.DATA.SELECTED, \"true\");\n        });\n        // TRIGGER LABEL\n        console.log(\"trigger\");\n        const triggerElement = (0, query_selector_1.queryByAttr)(document, data_attr_1.DATA.TRIGGER_FOR, type);\n        if (!triggerElement) {\n            return;\n        }\n        const triggerTextElement = triggerElement.querySelector(\"span\");\n        if (!triggerTextElement) {\n            return;\n        }\n        let label = \"\";\n        if (checkboxes.length === 0) {\n            label = triggerElement?.getAttribute(data_attr_1.DATA.DEFAULT_LABEL) ?? \"\";\n            triggerElement?.removeAttribute(data_attr_1.DATA.CHANGED);\n        }\n        else {\n            label = `${checkboxes[0].Label}`;\n            if (checkboxes.length > 1)\n                label += ` (+${checkboxes.length - 1})`;\n            triggerElement?.setAttribute(data_attr_1.DATA.CHANGED, \"true\");\n        }\n        triggerTextElement.innerText = label;\n    });\n    const allCheckboxes = Object.values(targetSelectedCheckboxes).flatMap((checkboxes) => checkboxes);\n    // SELECTED ONLY ELEMENTS\n    if (allCheckboxes.length === 0) {\n        clearAllButton.setAttribute(data_attr_1.DATA.HIDDEN, \"true\");\n    }\n    else {\n        clearAllButton.removeAttribute(data_attr_1.DATA.HIDDEN);\n    }\n}\nfunction setCheckoboxListQueryParams(targetSelectedCheckboxes) {\n    const url = new URL(window.location.href);\n    url.searchParams.set(CHECKBOX_FILTERS_QUERY_PARAM, (0, base64_1.encodeBase64)(JSON.stringify(targetSelectedCheckboxes)));\n    window.history.pushState({}, \"\", url);\n}\nfunction getOpenPopupElement() {\n    return (0, query_selector_1.queryByAttr)(document, data_attr_1.DATA.POPUP_FOR, popupOpen.value);\n}\nfunction getOpenPopupData(type = \"filtered\") {\n    switch (popupOpen.value) {\n        case window.search.Ids.Searcher.FilterManufacters: {\n            if (type === \"original\") {\n                return window.search.Manufacters.Checkboxes;\n            }\n            return filteredCheckboxesData.manufacters;\n        }\n        case window.search.Ids.Searcher.FilterTitles:\n            if (type === \"original\") {\n                return window.search.Titles.Checkboxes;\n            }\n            return filteredCheckboxesData.title;\n        case window.search.Ids.Searcher.FilterStatus:\n            if (type === \"original\") {\n                return window.search.Status.Checkboxes;\n            }\n            return filteredCheckboxesData.status;\n        case window.search.Ids.Searcher.FilterCriteria:\n            if (type === \"original\") {\n                return window.search.Criteria.Checkboxes;\n            }\n            return filteredCheckboxesData.criteria;\n        default:\n            return;\n    }\n}\nfunction searchOnCheckboxList(searchKey, list) {\n    const sanitize = (value) => value\n        .toLowerCase()\n        // removes accentuation\n        .normalize(\"NFD\")\n        .replaceAll(/[\\u0300-\\u036f]/g, \"\");\n    return list.filter((checkbox) => sanitize(checkbox.Label).includes(sanitize(searchKey)));\n}\nasync function fetchSearchSuggestions() {\n    isLoading.value = true;\n    try {\n        const currentUrlSearchParams = new URLSearchParams(window.location.search);\n        const response = await fetch(`/search/result?${currentUrlSearchParams.toString()}`);\n        console.log(\"response\", response);\n        if (response.status !== 200) {\n            return;\n        }\n        searchResultContainerElement.innerHTML = await response.text();\n    }\n    finally {\n        isLoading.value = false;\n    }\n}\nfunction rerenderPopupSearchList(targetValue) {\n    const targetPopup = getOpenPopupElement();\n    const allSelectedCheckboxes = (0, query_selector_1.queryAllByAttr)(targetPopup, data_attr_1.DATA.INDEX);\n    allSelectedCheckboxes?.forEach((option) => option.setAttribute(data_attr_1.DATA.HIDDEN, \"true\"));\n    const data = getOpenPopupData(\"original\");\n    if (!data) {\n        return;\n    }\n    const filteredCheckboxes = searchOnCheckboxList(targetValue, data);\n    filteredCheckboxes.forEach((option) => {\n        const checkboxElement = (0, query_selector_1.queryByAttr)(targetPopup, data_attr_1.DATA.ID, option.Id);\n        checkboxElement?.removeAttribute(data_attr_1.DATA.HIDDEN);\n    });\n    return filteredCheckboxes;\n}\nconst keyPressToAction = new Map([\n    [\n        \"ArrowDown\",\n        (e) => {\n            e.preventDefault();\n            const currentPopupDta = getOpenPopupData();\n            console.log(\"currentPopupDta\", currentPopupDta, activeIndex.value);\n            if (!currentPopupDta ||\n                currentPopupDta.length - 1 === activeIndex.value) {\n                return;\n            }\n            activeIndex.value++;\n            getOpenPopupElement()\n                ?.querySelector(`[${data_attr_1.DATA.ACTIVE}]`)\n                ?.scrollIntoView({ block: \"nearest\", inline: \"nearest\" });\n        },\n    ],\n    [\n        \"ArrowUp\",\n        (e) => {\n            e.preventDefault();\n            if (activeIndex.value === 0) {\n                return;\n            }\n            activeIndex.value--;\n            getOpenPopupElement()\n                ?.querySelector(`[${data_attr_1.DATA.ACTIVE}]`)\n                ?.scrollIntoView({ block: \"nearest\", inline: \"nearest\" });\n        },\n    ],\n    [\"Enter\", () => selectOption(activeIndex.value)],\n    [\"Escape\", closePopup],\n    [\"Tab\", closePopup],\n]);\nasync function selectOption(index) {\n    if (!popupOpen.value) {\n        return;\n    }\n    const openPopupData = getOpenPopupData();\n    if (!openPopupData) {\n        return;\n    }\n    const openOptionData = getOpenPopupData()?.[index];\n    if (!openOptionData) {\n        return;\n    }\n    const selectedCheckboxes = selectedTitles.value[popupOpen.value];\n    if (selectedCheckboxes?.some((option) => option.Id === openOptionData.Id)) {\n        selectedTitles.value = {\n            ...selectedTitles.value,\n            [popupOpen.value]: selectedCheckboxes.filter((option) => option.Id !== openOptionData.Id),\n        };\n    }\n    else {\n        selectedTitles.value = {\n            ...selectedTitles.value,\n            [popupOpen.value]: (selectedTitles.value[popupOpen.value] ?? []).concat(openOptionData),\n        };\n    }\n    fetchSearchSuggestions();\n}\nfunction handleMouseOverPopup(e) {\n    if (!canUseMouseEvents) {\n        return;\n    }\n    const target = e.target;\n    const hoveringElementIndex = Number(target.getAttribute(data_attr_1.DATA.INDEX));\n    if (isNaN(hoveringElementIndex)) {\n        return;\n    }\n    activeIndex.value = hoveringElementIndex;\n}\nfunction handlePopupClick(e) {\n    const target = e.target;\n    if (target.nodeName === \"INPUT\") {\n        return;\n    }\n    const hoveringElementIndex = Number(target.getAttribute(data_attr_1.DATA.INDEX));\n    if (isNaN(hoveringElementIndex)) {\n        return;\n    }\n    selectOption(hoveringElementIndex);\n}\nfunction handleFilterButtonClick(e) {\n    const targetId = e.currentTarget.getAttribute(data_attr_1.DATA.TRIGGER_FOR);\n    if (!targetId) {\n        return;\n    }\n    window.addEventListener(\"keydown\", handlekeyDown);\n    popupOpen.value = targetId;\n    activeIndex.value = DEFAULT_ACTIVE_INDEX;\n    const currentPopup = getOpenPopupElement();\n    if (!currentPopup) {\n        return;\n    }\n    currentPopup.querySelector(\"input\")?.focus();\n}\nfunction closePopupOnOutsideClick(e) {\n    const target = e.target;\n    const isTargetTrigger = filterTriggerElements.some((trigger) => trigger.getAttribute(data_attr_1.DATA.TRIGGER_FOR) ===\n        target.getAttribute(data_attr_1.DATA.TRIGGER_FOR));\n    if (isTargetTrigger) {\n        return;\n    }\n    if (!popupOpen.value || popupOpen.value === target.id) {\n        return;\n    }\n    const popupElement = getOpenPopupElement();\n    if (!popupElement) {\n        return;\n    }\n    if (popupElement.contains(target)) {\n        return;\n    }\n    closePopup();\n}\nfunction closePopup() {\n    popupOpen.value = DEFAULT_FILTER_POPUP_OPEN;\n    activeIndex.value = DEFAULT_ACTIVE_INDEX;\n    window.removeEventListener(\"keydown\", handlekeyDown);\n}\nasync function handleClearAllButtonCLick() {\n    selectedTitles.value = Object.keys(selectedTitles.value).reduce((acc, key) => {\n        acc[key] = [];\n        return acc;\n    }, DEFAULT_SELECTED_CHECKBOXES);\n    fetchSearchSuggestions();\n}\nasync function handlekeyDown(e) {\n    const action = keyPressToAction.get(e.key);\n    if (!action) {\n        return;\n    }\n    if (e.key !== \"Tab\") {\n    }\n    canUseMouseEvents = false;\n    action(e);\n}\nfunction handleInputChangeFactory(type) {\n    return (e) => {\n        const searchValue = e.target.value;\n        switch (type) {\n            case \"manufacters\":\n                manufactersSearchValue.value = searchValue;\n                break;\n            case \"title\":\n                titleSearchValue.value = searchValue;\n                break;\n            default:\n                break;\n        }\n        activeIndex.value = DEFAULT_ACTIVE_INDEX;\n    };\n}\nfunction initialTitlesValue() {\n    const url = new URL(window.location.href);\n    const rawParam = url.searchParams.get(CHECKBOX_FILTERS_QUERY_PARAM);\n    if (!rawParam) {\n        return;\n    }\n    try {\n        console.log(JSON.parse((0, base64_1.decodeBase64)(rawParam)));\n        selectedTitles.value = JSON.parse((0, base64_1.decodeBase64)(rawParam));\n    }\n    catch (error) {\n        console.log(\"error\", error);\n    }\n}\nfunction showFilters() {\n    filtersElement.removeAttribute(data_attr_1.DATA.HIDDEN);\n}\nfunction queryElements() {\n    filterTriggerElements = [\n        ...document.querySelectorAll(`#${window.search.Ids.Searcher.FilterTrigger}`),\n    ];\n    popupElements = [\n        ...document.querySelectorAll(`#${window.search.Ids.Searcher.FilterPopup}`),\n    ];\n    titlesSearchInput = (0, query_selector_1.queryByAttr)(document, \"name\", window.search.Ids.Searcher.FilterTitles);\n    filtersElement = document.getElementById(window.search.Ids.Searcher.Filters);\n    manufactersSearchInput = (0, query_selector_1.queryByAttr)(document, \"name\", window.search.Ids.Searcher.FilterManufacters);\n    searchResultContainerElement = document.getElementById(window.search.Ids.Searcher.ResultsContainer);\n    clearAllButton = document.getElementById(window.search.Ids.Searcher.FiltersClearAll);\n}\nfunction addEventListeners() {\n    clearAllButton.addEventListener(\"click\", handleClearAllButtonCLick);\n    manufactersSearchInput.addEventListener(\"input\", handleInputChangeFactory(\"manufacters\"));\n    titlesSearchInput.addEventListener(\"input\", handleInputChangeFactory(\"title\"));\n    filterTriggerElements.forEach((triggerElement) => triggerElement.addEventListener(\"click\", handleFilterButtonClick));\n    popupElements.forEach((popupElement) => {\n        popupElement.addEventListener(\"mouseover\", handleMouseOverPopup);\n        popupElement.addEventListener(\"click\", handlePopupClick);\n        popupElement.addEventListener(\"mouseover\", () => (canUseMouseEvents = true));\n    });\n    window.document.addEventListener(\"click\", closePopupOnOutsideClick);\n}\nwindow.addEventListener(\"load\", () => {\n    queryElements();\n    addEventListeners();\n    initialTitlesValue();\n    showFilters();\n    filteredCheckboxesData = {\n        title: window.search.Titles.Checkboxes,\n        manufacters: window.search.Manufacters.Checkboxes,\n        status: window.search.Status.Checkboxes,\n        criteria: window.search.Criteria.Checkboxes,\n    };\n});\n\n\n//# sourceURL=webpack://project-bored/./client/search-filters.ts?");

/***/ }),

/***/ "./client/searcher.ts":
/*!****************************!*\
  !*** ./client/searcher.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst data_attr_1 = __webpack_require__(/*! ./data-attr */ \"./client/data-attr.ts\");\nconst debounce_1 = __webpack_require__(/*! ./debounce */ \"./client/debounce.ts\");\nconst DEFAULT_ACTIVE_INDEX = -1;\nconst DEFAULT_SEARCH_VALUE = \"\";\n/** State from the data-state */\nlet suggestionsState = [];\n/** Has the suggestions been fetched */\nlet hasFetched = false;\n/** Is fetching after closing the popup  */\nlet isFetchingFromEsc = false;\n/** Last search value fetched */\nlet lastFetchedValue = DEFAULT_SEARCH_VALUE;\n/** Is mouse on top of the suggetions container */\nlet isMouseOverSuggestions = false;\n/** Is search input focused */\nlet isSearchinputFocused = false;\n// Elements\nlet elementClearHistoryButton;\nlet elementSearchSuggestionsContainer;\nlet elementClearSearchInput;\nlet elementSearchInput;\n/** Input value state */\nlet searchValue = new Proxy({ value: DEFAULT_SEARCH_VALUE }, {\n    set(obj, _, targetSearchValue) {\n        obj.value = targetSearchValue;\n        if (elementSearchInput.value !== targetSearchValue) {\n            elementSearchInput.value = targetSearchValue;\n        }\n        if (targetSearchValue) {\n            elementClearSearchInput.removeAttribute(data_attr_1.DATA.HIDDEN);\n        }\n        else {\n            elementClearSearchInput.setAttribute(data_attr_1.DATA.HIDDEN, \"true\");\n        }\n        return true;\n    },\n});\n/** Popup open state */\nlet showPopup = new Proxy({ value: false }, {\n    set(obj, _, targetPopup) {\n        obj.value = targetPopup;\n        if (targetPopup) {\n            elementSearchSuggestionsContainer.removeAttribute(data_attr_1.DATA.HIDDEN);\n        }\n        else {\n            elementSearchSuggestionsContainer.setAttribute(data_attr_1.DATA.HIDDEN, \"true\");\n        }\n        return true;\n    },\n});\n/** Active index state */\nlet activeIndex = new Proxy({ value: DEFAULT_ACTIVE_INDEX }, {\n    set(obj, _, targetIndex) {\n        if (!suggestionsState ||\n            targetIndex < -1 ||\n            targetIndex > suggestionsState.length - 1) {\n            return false;\n        }\n        obj.value = targetIndex;\n        elementSearchSuggestionsContainer\n            .querySelector(`[${data_attr_1.DATA.ACTIVE}]`)\n            ?.removeAttribute(data_attr_1.DATA.ACTIVE);\n        elementSearchSuggestionsContainer\n            .querySelector(`[${data_attr_1.DATA.INDEX}=\"${targetIndex}\"]`)\n            ?.setAttribute(data_attr_1.DATA.ACTIVE, \"true\");\n        return true;\n    },\n});\nconst debouncedFetchSearchSuggestions = (0, debounce_1.debounce)(fetchSearchSuggestions, 500);\nasync function fetchSearchSuggestions() {\n    hasFetched = true;\n    lastFetchedValue = searchValue.value;\n    const response = await fetch(`/search/suggestions?q=${searchValue.value}`);\n    if (response.status !== 200) {\n        return;\n    }\n    elementSearchSuggestionsContainer.innerHTML = await response.text();\n    extractStateFromSuggestions();\n}\nasync function fetchClearHistory() {\n    const response = await fetch(`/search/clear-history`, { method: \"DELETE\" });\n    if (response.status !== 200) {\n        return;\n    }\n    elementSearchSuggestionsContainer.innerHTML = \"\";\n}\nfunction extractStateFromSuggestions() {\n    const elementWithState = elementSearchSuggestionsContainer.querySelector(`[${data_attr_1.DATA.STATE}]`);\n    const state = elementWithState?.dataset.state;\n    if (!state) {\n        return;\n    }\n    try {\n        suggestionsState = JSON.parse(state.replaceAll(`'`, `\"`));\n        elementSearchSuggestionsContainer.removeAttribute(data_attr_1.DATA.STATE);\n        activeIndex.value = DEFAULT_ACTIVE_INDEX;\n    }\n    catch (error) {\n        console.error(\"error\", error);\n    }\n}\nasync function handleBlur() {\n    isSearchinputFocused = false;\n    if (isMouseOverSuggestions) {\n        return;\n    }\n    showPopup.value = false;\n}\nasync function handleFocus() {\n    isSearchinputFocused = true;\n    if (!hasFetched) {\n        fetchSearchSuggestions();\n    }\n    showPopup.value = true;\n}\nfunction handleInputChange(e) {\n    if (!showPopup.value) {\n        showPopup.value = true;\n    }\n    isFetchingFromEsc = false;\n    searchValue.value = e.target.value;\n    if (!searchValue.value) {\n        /** Instantly fetch to get the history */\n        fetchSearchSuggestions();\n        return;\n    }\n    debouncedFetchSearchSuggestions();\n}\nconst keyPressToAction = new Map([\n    [\n        \"Escape\",\n        async () => {\n            activeIndex.value = -1;\n            showPopup.value = false;\n            isFetchingFromEsc = true;\n            try {\n                await fetchSearchSuggestions();\n            }\n            finally {\n                isFetchingFromEsc = false;\n            }\n        },\n    ],\n    [\n        \"ArrowDown\",\n        () => {\n            if (activeIndex.value === -1 && !showPopup.value) {\n                showPopup.value = true;\n                return;\n            }\n            if (isFetchingFromEsc) {\n                return;\n            }\n            activeIndex.value++;\n            searchInputValueSelectedIndex();\n        },\n    ],\n    [\n        \"ArrowUp\",\n        () => {\n            if (!showPopup.value) {\n                return;\n            }\n            activeIndex.value--;\n            if (activeIndex.value === -1) {\n                // Returns the value to the last fetched value\n                searchValue.value = lastFetchedValue;\n                return;\n            }\n            searchInputValueSelectedIndex();\n        },\n    ],\n]);\nasync function handlekeyDown(e) {\n    const action = keyPressToAction.get(e.key);\n    if (!action) {\n        return;\n    }\n    e.preventDefault();\n    action(e);\n}\nasync function handlekeyClearHistoryClick(e) {\n    if (e.target.id !== window.home.Ids.Searcher.ClearHistory) {\n        return;\n    }\n    fetchClearHistory();\n}\nfunction handleClearSearchInputClick() {\n    searchValue.value = DEFAULT_SEARCH_VALUE;\n    fetchSearchSuggestions();\n}\nasync function handleMouseEnterSuggestions(e) {\n    isMouseOverSuggestions = true;\n    const targetIndex = suggestionElementIndex(e);\n    if (targetIndex === -1) {\n        return;\n    }\n    activeIndex.value = targetIndex;\n}\nasync function handleMouseLeaveSuggestions(e) {\n    isMouseOverSuggestions = false;\n    if (isSearchinputFocused) {\n        return;\n    }\n    showPopup.value = false;\n}\nfunction suggestionElementIndex(e) {\n    const notFoundIndex = -1;\n    const target = e.target;\n    if (target.tagName !== \"A\") {\n        return notFoundIndex;\n    }\n    const attrIndex = target.getAttribute(data_attr_1.DATA.INDEX);\n    const targetIndex = Number(attrIndex);\n    if (isNaN(targetIndex)) {\n        return notFoundIndex;\n    }\n    return targetIndex;\n}\nfunction searchInputValueSelectedIndex() {\n    const selectedValue = suggestionsState[activeIndex.value];\n    if (!selectedValue) {\n        return;\n    }\n    searchValue.value = selectedValue;\n}\nfunction setDefaultSearchValue() {\n    searchValue.value = elementSearchInput.value;\n    // Prefetch suggestions\n    if (searchValue.value) {\n        fetchSearchSuggestions();\n    }\n}\nfunction queryElements() {\n    elementSearchInput = document.getElementById(window.home.Ids.Searcher.Input);\n    elementSearchSuggestionsContainer = document.getElementById(window.home.Ids.Searcher.Suggestions);\n    elementClearHistoryButton = document.getElementById(window.home.Ids.Searcher.ClearHistory);\n    elementClearSearchInput = document.getElementById(window.home.Ids.Searcher.ClearInput);\n}\nfunction addEventListeners() {\n    elementClearSearchInput.addEventListener(\"click\", handleClearSearchInputClick);\n    elementSearchInput.addEventListener(\"input\", handleInputChange);\n    elementSearchInput.addEventListener(\"blur\", handleBlur);\n    elementSearchInput.addEventListener(\"focus\", handleFocus);\n    elementSearchInput.addEventListener(\"keydown\", handlekeyDown);\n    elementSearchSuggestionsContainer.addEventListener(\"mouseover\", handleMouseEnterSuggestions);\n    elementSearchSuggestionsContainer.addEventListener(\"mouseleave\", handleMouseLeaveSuggestions);\n    elementSearchSuggestionsContainer.addEventListener(\"click\", handlekeyClearHistoryClick);\n}\nfunction initSearcher() {\n    queryElements();\n    addEventListeners();\n    setDefaultSearchValue();\n}\nwindow.addEventListener(\"load\", initSearcher);\n\n\n//# sourceURL=webpack://project-bored/./client/searcher.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./client/pages/search.ts");
/******/ 	
/******/ })()
;